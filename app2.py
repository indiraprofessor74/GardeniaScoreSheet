import streamlit as st
import pandas as pd
import gspread
import os
import time
from datetime import datetime
import base64
from io import BytesIO

# --- 🎯 CONFIGURATION VARIABLES (MATCH YOUR SETUP) ---
SPREADSHEET_ID = "1wF-rfK371FomWMtRCGEiy5c-1RZztHatsIDvNB8pQuM" 
SCORE_SHEET_NAME = "scores" 
JUDGE_SHEET_NAME = "Judges_Metadata"
EVENT_SHEET_NAME = "Events_Metadata"
PARTICIPANT_SHEET_NAME = "Participants_Metadata"

# --- ADMIN CREDENTIALS ---
ADMIN_USERNAME = "admin"
ADMIN_PASSWORD = "Gcu@2025"

# --- SCORING CONFIGURATION ---
MAX_SCORE = 25.0
SCORE_STEP = 1.0

# NOTE: INSERT YOUR GENERATED BASE64 STRINGS HERE (from Step 1)
HEADING_B64 = "" 
UNIVERSITY_HEADING_B64 = ""
FAVICON_B64 = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkBAMAAACCzIhnAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAAeUExURVQGBf////aEGXgtHPv6+trLyPGAGPLv7r9bFaSDgPGqkZoAAAO8SURBVFjD7ZjNa9swGIcDJl18NFUJuSogcnRr1jZHQaDXhFLGbkUDnxe2UnYbLowea7Yy+t9O74cbSbYTeYwdxoRLUsU/P3o/9EryKBvcRtlqUNMgGdi0GImbQW1rKWI0qG20leR/QzL99ylFsSyKAZTl8zubGJm4e8njKMmzFiAA1dX3GMpykwmbfVal9SrL3h+mLLfZChigsR+r7MshSqqF5vtFBkMLNG1KuqWH2wu+aA2a672Uzcreizc3IquZPu2hXOyGRF7DS8/6KSneSBcNC+0Ret1LqdlXKAI7MKC246SPkgr2EtwrkEjDczABpdbZqyHIg3pCopNuSooPBhlEXdx/Zi+j49adlFo3FJ3dvRR5UTxvgAhCMeuiJNusMWDaJGPyE62C2OQdlHFjunBCl/wQ6BN93UWpyVabY26CJBs0btblsUQ3AfRTNxXWkh3XpYw5S1bhbKg9rks5bWL4KZhyaW+ObdAOa3trYtdul0NJBFkijlvFI113z5cx5ZfWT9F17ELQenMVXy1rSi8xi6+WFDGdreMpWwrkIVMcCjhMdLq4l5JSLXJm7EHKmGf8LH59GXMJOo6nvCGI+BhPOeUit46nnML2xF7reErNqf8UT3nLWxRHkhRBCyhnJTbjRHIig5b7lMrtZonqkzDFYK+JkkxZgk1+HUJRShplPImnMaZNsQoZUJTT2hSJFBlQjMFe/AhtOQK07b/1KdQJX+zAA8qRIsq8n6KC6E9IYeaBLa8i+08Q/Qn/sAg8Zp3ConIRzn0ar1R5O2HoaXIRVhhD/W5gOBvzCjFqHtYx7pe37Xw/Ix/PQwr3u8bsJJgYtyHlXLI325LKTQyHwl72sowb+czkrfWFXSZbI+NfVHsVqwwmszfLHH5jpLtW2klm4HFuArQd5lEmitJMBZjEuA7z131OW2l8a87JLzLv2F1U9Dh7x4MLkejiUnXtlI44l2zbaZKKe+edOyXZUHaaxBYrvyj4+zF2DaS7XDxARj5i7mNY8s5dHwdAYb7bP8O5D73znr1lRcEkFVnFnt+VkWAH20xdGBtGFb87oe/YJ1cljAkeTLNeMcWZReFufCKpzCIAS5JB69SePf8ZmOFTgoLYOlkk6DEygxIOYrLYe36ZyBJLF5c1siXff0qaSJ9iSi/lOs9il1KVrxRl4/nh8Inv0g6nJIpFBIq+c+U3iB8sttZ7D5Gn1+KxxPQqHyNPr1xdLwedkf+/Vfjjr27yZBR/oeR+UMt+42VXpodJ8F3ACD6iG+6/fwEHd69XMJ/97QAAAABJRU5ErkJggg==" 

# --- End Configuration ---
# --- End Configuration ---


# --- Helper for PDF/HTML Download ---

# Inject favicon using unsafe markdown as a workaround for older Streamlit versions
if FAVICON_B64:
    FAVICON_HTML = f'<link rel="shortcut icon" href="data:image/png;base64,{FAVICON_B64}" type="image/x-icon">'
    st.markdown(FAVICON_HTML, unsafe_allow_html=True) 

def create_html_report(df):
    """Generates an A4-sized HTML report with custom headers and styled table, using embedded Base64 images."""
    if df.empty:
        return "<html><body><h1>No data to report.</h1></body></html>"

    university_heading_b64 = UNIVERSITY_HEADING_B64
    heading_b64 = HEADING_B64
    
    # Select the relevant columns for the final report presentation, including new metadata and the display name
    report_cols = [
        "Rank", 
        "Event Name", 
        "Participant Display Name", # NEW: Use the combined name
        "Registration ID",          # NEW
        "Participant Name",         # Leader Name
        "Team Member Names",        # NEW
        "Final Total Score",
        "Email Id", 
        "Mobile No", 
        "Organization Name"
    ]
    
    # Filter columns to only those present in the DataFrame
    df_report = df[[col for col in report_cols if col in df.columns]]
    
    # Optional: Rename 'Participant Display Name' to a cleaner 'Participant/Team' for the report
    if 'Participant Display Name' in df_report.columns:
        df_report = df_report.rename(columns={'Participant Display Name': 'Participant / Team'})

    # Convert DataFrame to an HTML table with simple styling
    html_table = df_report.to_html(index=False, classes='table table-striped', escape=False)

    # Full HTML structure with custom CSS for styling and A4 print format
    html_content = f"""
    <html>
    <head>
    <title>Gardenia - Winners List</title>
    <style>
        @page {{ size: A4; margin: 20mm; }}
        body {{ font-family: Arial, sans-serif; margin: 0; padding: 0; }}
        .container {{ width: 100%; max-width: 210mm; margin: 0 auto; padding: 20px; }}
        /* CSS for embedded images */
        .header-image {{ width: 100%; max-width: 400px; display: block; margin: 0 auto 10px; }} 
        .header h1 {{ margin-bottom: 5px; color: #004d99; font-size: 24pt; }}
        .header h2 {{ margin-top: 0; color: #555; font-size: 16pt; font-weight: normal; }}
        .table-container {{ margin-top: 30px; }}
        table {{ width: 100%; border-collapse: collapse; font-size: 10pt; }}
        th, td {{ border: 1px solid #ccc; padding: 8px 12px; text-align: left; }}
        th {{ background-color: #f2f2f2; font-weight: bold; color: #333; }}
    </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                {f'<img class="header-image" src="data:image/png;base64,{university_heading_b64}" alt="University Heading">' if university_heading_b64 else '<h1>[University Heading Placeholder]</h1>'}
                {f'<img class="header-image" src="data:image/png;base64,{heading_b64}" alt="Event Heading">' if heading_b64 else '<h2>[Event Heading Placeholder]</h2>'}
                <h2>Gardenia - 2025 Winners List</h2>
                <p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            <div class="table-container">
                {html_table}
            </div>
        </div>
    </body>
    </html>
    """
    return html_content

def get_html_download_link(html_content, filename):
    """Creates a download button for the generated HTML content."""
    b64 = base64.b64encode(html_content.encode()).decode()
    return f"""
        <a href="data:text/html;base64,{b64}" download="{filename}" target="_blank">
            <button style="
                background-color: #4CAF50; 
                color: white; 
                padding: 10px 20px; 
                border: none; 
                border-radius: 4px; 
                cursor: pointer; 
                font-size: 16px;">
                ⬇️ Download Report (PDF Ready)
            </button>
        </a>
    """

# ----------------------------------------------------------------------------------------------------
## Utility Functions (Google Sheets Connection - USING ST.SECRETS)
# ----------------------------------------------------------------------------------------------------

@st.cache_resource
def get_google_sheet_client():
    """Initializes and returns the gspread client using Streamlit Secrets."""
    try:
        # Load credentials from Streamlit Secrets (reads from the [gcp_service_account] section)
        creds_dict = st.secrets["gcp_service_account"].to_dict()
        
        # Authenticate gspread using the dictionary
        gc = gspread.service_account_from_dict(creds_dict)
        
        return gc.open_by_key(SPREADSHEET_ID)
    except KeyError:
        st.error("❌ 'gcp_service_account' section missing from Streamlit Secrets. Cannot connect. Check your secrets file.")
        st.stop()
    except Exception as e:
        st.error(f"❌ Failed to connect to Google Sheet. Error: {e}")
        st.stop()

spreadsheet = get_google_sheet_client()

@st.cache_data(ttl=300) 
def load_sheet_data(sheet_name):
    """Reads a specific sheet and returns it as a DataFrame."""
    try:
        worksheet = spreadsheet.worksheet(sheet_name)
        data = worksheet.get_all_records()
        df = pd.DataFrame(data)
        
        # FIX: Strip whitespace from all column names immediately after loading
        df.columns = df.columns.str.strip()

        # NOTE: 'Event_ID' column does not exist in Participants_Metadata based on user input,
        # so this specific numeric conversion for Participants will now be skipped,
        # but kept for other sheets that might use it (like Judges).
        if sheet_name in [JUDGE_SHEET_NAME] and 'Event_ID' in df.columns:
            df['Event_ID'] = pd.to_numeric(df['Event_ID'], errors='coerce').fillna(0).astype(int)
        
        # FIX: Ensure E_ID in Events is treated as integer
        if sheet_name == EVENT_SHEET_NAME and 'E_ID' in df.columns:
            df['E_ID'] = pd.to_numeric(df['E_ID'], errors='coerce').fillna(0).astype(int)
        
        return df
    except gspread.WorksheetNotFound:
        st.error(f"❌ Required metadata sheet '{sheet_name}' not found. Check sheet names.")
        st.stop()
    except Exception as e:
        # This will catch gspread errors like duplicate column names
        st.error(f"❌ Error loading metadata from sheet '{sheet_name}'. Error: {e}")
        return pd.DataFrame()

def write_score_to_sheet(score_data):
    """Appends a new row of score data to the main Score Sheet."""
    # Expected score_data format (14 elements): 
    # [Judge Name, Event Name, Date, Leader Name, Round, C1, C2, C3, C4, C5, Total, Team Member Names, Team Member College/School Names, Date & Time Entered]
    try:
        worksheet = spreadsheet.worksheet(SCORE_SHEET_NAME)
        worksheet.append_row(score_data, value_input_option='USER_ENTERED')
        return True
    except Exception as e:
        st.error(f"❌ Google Sheet write failed: {e}")
        return False

# ----------------------------------------------------------------------------------------------------
## Score Submission Form (Reusable Function for New Entry and Modify)
# ----------------------------------------------------------------------------------------------------

# Function signature MUST now include 'participant_data' (DF), and 'selected_round' (for modify)
def score_submission_form(judge_name, event_name, event_date, c_names, participant_data, is_new, selected_participant_name=None, initial_scores=[0.0, 0.0, 0.0, 0.0, 0.0], selected_round=None):
    """Renders the score submission form, pre-filled if modifying an old score."""
    
    max_score = MAX_SCORE
    step = SCORE_STEP
    
    # --- FIND CORRECT LEADER NAME COLUMN ---
    leader_name_col = None
    possible_leader_cols = ['Leader Name', 'Participant Name', 'P_Name', 'Name']
    
    for col in possible_leader_cols:
        if col in participant_data.columns:
            leader_name_col = col
            break

    if not leader_name_col:
        st.error("❌ Critical: Could not find 'Leader Name' or 'Participant Name' column in participant data.")
        return
        
    # Alias the found column to 'P_Name' for internal logic
    temp_df = participant_data.rename(columns={leader_name_col: 'P_Name'})
    participant_names = temp_df['P_Name'].tolist() 
    # ---------------------------------------

    # Create Round list (assuming max 4 rounds, adjust as needed)
    round_list = [str(i) for i in range(1, 5)] 
    
    current_round = None

    if is_new:
        selected_participant_name = st.selectbox(
            "Select Participant (Leader Name) to Score", 
            [""] + participant_names, 
            key='new_participant_select'
        )
        # In new entry, default to Round 1
        current_round = st.selectbox("Select Round", round_list, key='new_round_select')
        
    else:
        # In modify tab, participant and round are selected/displayed externally
        st.markdown(f"**Modifying Score for:** **{selected_participant_name}**")
        # Ensure the selected_round is in the list and set the initial index
        round_index = round_list.index(str(selected_round)) if str(selected_round) in round_list else 0
        current_round = st.selectbox("Select Round", round_list, index=round_index, key='modify_round_select')

    
    if not selected_participant_name:
        return
        
    # NEW: Find the display name and team info for the currently selected participant/leader
    try:
        # Use the found column name for filtering
        participant_row = participant_data[participant_data[leader_name_col] == selected_participant_name].iloc[0]
        is_group = participant_row.get('Event Type') == 'Group'
        
        team_members = participant_row.get('Team Member Names', '')
        team_college = participant_row.get('Team Member College/School Names', '')

        # Display the combined name if it's a group
        display_name = f"{selected_participant_name} ({team_members})" if is_group and team_members else selected_participant_name
    except Exception:
        display_name = selected_participant_name # Fallback 
        team_members = ''
        team_college = ''
        
    st.markdown(f"**Participant:** `{display_name}`")
    st.markdown(f"**Round:** `{current_round}`")
        
    # KEY now includes participant name and round for uniqueness
    form_key = f"score_form_{'new' if is_new else 'modify'}_{selected_participant_name}_{current_round}" 
    
    with st.form(form_key, clear_on_submit=is_new):
        st.markdown(f"**Adjust Marks (Max {max_score:.0f} per criterion):**")
        
        # --- SLIDER INPUTS ---
        cols_slider = st.columns([1, 4])
        
        with cols_slider[0]:
            st.markdown(f"**{c_names['c1']}:**")
            st.markdown(f"**{c_names['c2']}:**")
            st.markdown(f"**{c_names['c3']}:**")
            st.markdown(f"**{c_names['c4']}:**")
            st.markdown(f"**{c_names['c5']}:**") # NEW CRITERION 5
            
        with cols_slider[1]:
            # Ensure values are float for sliders
            c1 = st.slider("c1", min_value=0.0, max_value=max_score, value=float(initial_scores[0]), step=step, key=f'{form_key}_c1_val', label_visibility="collapsed")
            c2 = st.slider("c2", min_value=0.0, max_value=max_score, value=float(initial_scores[1]), step=step, key=f'{form_key}_c2_val', label_visibility="collapsed")
            c3 = st.slider("c3", min_value=0.0, max_value=max_score, value=float(initial_scores[2]), step=step, key=f'{form_key}_c3_val', label_visibility="collapsed")
            c4 = st.slider("c4", min_value=0.0, max_value=max_score, value=float(initial_scores[3]), step=step, key=f'{form_key}_c4_val', label_visibility="collapsed")
            c5 = st.slider("c5", min_value=0.0, max_value=max_score, value=float(initial_scores[4]), step=step, key=f'{form_key}_c5_val', label_visibility="collapsed") # NEW CRITERION 5

        total = c1 + c2 + c3 + c4 + c5 # UPDATE TOTAL CALCULATION
        st.success(f"**Automatic Total: {total:.1f}**")
        
        submit_label = "Submit New Score 💾" if is_new else "Overwrite/Update Score 📝"

        if st.form_submit_button(submit_label):
            submission_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # --- UPDATED score_data ARRAY (14 elements) ---
            score_data = [
                judge_name, 
                event_name, 
                event_date, 
                selected_participant_name, # This maps to 'Leader Name' in the score sheet
                current_round, 
                c1, c2, c3, c4, c5, 
                total,
                team_members,      # Mapped from metadata sheet
                team_college,      # Mapped from metadata sheet
                submission_timestamp # Date & Time Entered
            ]
            
            if write_score_to_sheet(score_data):
                action = "New Score" if is_new else "Score Update"
                st.success(f"✅ {action} for **{selected_participant_name}** (Round {current_round}, {total:.1f}) recorded in Google Sheet! (Old score is overwritten by averaging.)")
                load_sheet_data.clear() # Clear cache to refresh results/modify list
                st.rerun()

# ----------------------------------------------------------------------------------------------------
## Session State and Login
# ----------------------------------------------------------------------------------------------------

for k, v in {"logged_in": False, "username": None, "assigned_event_id": None, "assigned_event_name": None, "role": None}.items():
    st.session_state.setdefault(k, v)

def login_user_gsheet():
    """Authenticates user against Admin fixed credentials or Judge metadata sheet."""
    st.title("🎤 Gardenia25-Scoring System")
    
    # Display the image using Base64/Markdown
    if UNIVERSITY_HEADING_B64:
        st.markdown(f'<img src="data:image/png;base64,{UNIVERSITY_HEADING_B64}" width="200">', unsafe_allow_html=True)
    else:
        st.warning("University heading image not loaded (Placeholder Active).")
        
    st.subheader("🔐 User Login")
    st.info("Please enter your designated username and password to proceed.")
    
    judges_df = load_sheet_data(JUDGE_SHEET_NAME)
    events_df = load_sheet_data(EVENT_SHEET_NAME)
    
    username_in = st.text_input("Username", key="login_username")
    pwd_in = st.text_input("Password", type="password", key="login_password")
    
    if st.button("Login"):
        
        # --- 1. ADMIN LOGIN CHECK ---
        if username_in == ADMIN_USERNAME and pwd_in == ADMIN_PASSWORD:
            st.session_state.update({
                "logged_in": True,
                "username": "Score Committee Admin",
                "role": "Admin"
            })
            st.success("Admin Login Successful! Accessing Results Panel.")
            time.sleep(1)
            st.rerun()
            return

        # --- 2. JUDGE LOGIN CHECK (DYNAMIC) ---
        
        judge_row = judges_df[
            (judges_df['Username'] == username_in) & 
            (judges_df['Password'] == pwd_in)
        ]
        
        if not judge_row.empty:
            judge_name = judge_row['J_Name'].iloc[0]
            assigned_event_id = judge_row['Assigned_E_ID'].iloc[0]
            
            event_row = events_df[events_df['E_ID'] == assigned_event_id]
            
            if not event_row.empty:
                assigned_event_name = event_row['E_Name'].iloc[0]
                
                # Update session state with the correct assigned event info
                st.session_state.update({
                    "logged_in": True,
                    "username": judge_name,
                    "assigned_event_id": assigned_event_id,
                    "assigned_event_name": assigned_event_name,
                    "role": "Judge" 
                })
                st.success(f"Login Successful! Judge {judge_name} assigned to {assigned_event_name}.")
                time.sleep(1)
                st.rerun()
            else:
                 st.error("❌ Login failed: Assigned event not found in metadata sheet.")
        else:
            st.error("❌ Invalid username or password. Please try again.")

# ----------------------------------------------------------------------------------------------------
## UI Interface 1: Judge Score Submission (Write Data)
# ----------------------------------------------------------------------------------------------------

def judge_score_page():
    """The main score entry and modification UI for a judge."""
    
    # Display the image using Base64/Markdown
    if HEADING_B64:
        st.markdown(f'<img src="data:image/png;base64,{HEADING_B64}" class="img-fluid" style="width: 100%;">', unsafe_allow_html=True)
    else:
        st.warning("Event heading image not loaded (Placeholder Active).")
        
    st.markdown("## 📝 Judge Score Management")
    
    judge_name = st.session_state.username
    e_id = st.session_state.assigned_event_id
    event_name = st.session_state.assigned_event_name # This is the Event Title string
    
    # Load metadata (needed for criteria and participant list)
    events_df = load_sheet_data(EVENT_SHEET_NAME)
    participants_df = load_sheet_data(PARTICIPANT_SHEET_NAME)
    
    event_row = events_df[events_df['E_ID'] == e_id]
    
    if event_row.empty:
        st.error("Error: Could not find event details in metadata.")
        return

    # Extract required info
    event_row = event_row.iloc[0]
    event_date = str(event_row['Datetime']).split(' ')[0] 
    
    # Extract criteria names for dynamic labels
    c_names = {
        'c1': event_row.get('Criterion1_Name', 'Criterion 1: Default'),
        'c2': event_row.get('Criterion2_Name', 'Criterion 2: Default'),
        'c3': event_row.get('Criterion3_Name', 'Criterion 3: Default'),
        'c4': event_row.get('Criterion4_Name', 'Criterion 4: Default'),
        'c5': event_row.get('Criterion5_Name', 'Criterion 5: Default'), # NEW CRITERION 5
    }

    st.markdown(f"**Judge:** `{judge_name}` | **Event:** `{event_name}` | **Date:** `{event_date}`")

    # FIX: Participant filtering is now done using 'Event Title' column and the 'event_name' string.
    if 'Event Title' not in participants_df.columns:
        st.error("❌ 'Event Title' column not found in Participants Metadata. Please ensure the column names are exactly as specified.")
        return
        
    event_participants_df = participants_df[
        participants_df['Event Title'] == event_name
    ].copy()

    if event_participants_df.empty:
        st.warning(f"No participants found for event '{event_name}' in the metadata sheet (filtered by 'Event Title').")
        return
        
    # --- FIND CORRECT LEADER NAME COLUMN ---
    leader_name_col = None
    possible_leader_cols = ['Leader Name', 'Participant Name', 'P_Name', 'Name', 'LEADER NAME']
    
    for col in possible_leader_cols:
        if col in event_participants_df.columns:
            leader_name_col = col
            break

    if not leader_name_col:
        st.error(f"❌ Critical: Could not find Leader/Participant Name column in data. Available columns are: **{list(event_participants_df.columns)}**")
        return
        
    # Alias the found column to 'P_Name' for internal use in the score submission form
    event_participants_df = event_participants_df.rename(columns={leader_name_col: 'P_Name'})
    # ---------------------------------------
        
    # --- TAB SETUP ---
    tab_new, tab_modify = st.tabs(["🆕 New Score Entry", "✍️ Review & Modify Marks"])

    with tab_new:
        st.markdown("### Entering New Scores")
        # --- NEW SCORE ENTRY LOGIC ---
        # Pass the DataFrame of event participants (Leader Names)
        score_submission_form(judge_name, event_name, event_date, c_names, event_participants_df, is_new=True)

    with tab_modify:
        st.markdown("### View Your Submitted Scores")
        
        # Load all scores and filter by judge and event
        all_scores_df = load_sheet_data(SCORE_SHEET_NAME)
        
        if all_scores_df.empty:
            st.info("No scores found in the sheet yet.")
            return

        # NEW: Aggregation key is now 'Leader Name'
        judge_scores_df = all_scores_df[
            (all_scores_df['Judge Name'] == judge_name) & 
            (all_scores_df['Event Name'] == event_name)
        ].copy() # Use .copy() to avoid SettingWithCopyWarning
        
        # Ensure 'Round' is available for the check (default to '1' for old entries)
        if 'Round' not in judge_scores_df.columns:
            judge_scores_df['Round'] = '1'
        else:
            judge_scores_df['Round'] = judge_scores_df['Round'].astype(str)

        if judge_scores_df.empty:
            st.info(f"You have not submitted any scores for the event: {event_name}.")
            return
            
        # Get the latest score for each participant/round combination by this judge
        # Key must use 'Leader Name'
        latest_scores_df = judge_scores_df.sort_values(by='Date & Time Entered', ascending=False).drop_duplicates(subset=['Leader Name', 'Round'])
        
        st.dataframe(latest_scores_df[[
            'Date & Time Entered', 'Leader Name', 'Round', # KEY: Leader Name
            'Criterion1_Marks', 'Criterion2_Marks', 'Criterion3_Marks', 'Criterion4_Marks', 'Criterion5_Marks', 'Total' # ADD C5 TO DISPLAY
        ]], use_container_width=True, hide_index=True)

        st.divider()
        st.markdown("### Modify a Previous Score")
        
        # Dropdown to select participant AND round whose score needs modifying
        # Create a combined identifier for selection (Leader Name - Round X)
        latest_scores_df['Selection_ID'] = latest_scores_df['Leader Name'] + " - Round " + latest_scores_df['Round'].astype(str) # KEY: Leader Name

        modify_selection_ids = latest_scores_df['Selection_ID'].tolist()
        
        selected_id_modify = st.selectbox(
            "Select Participant and Round to Modify", 
            [""] + modify_selection_ids, 
            key='modify_id_select'
        )

        if selected_id_modify:
            # Find the row for the selected participant/round combination
            past_row = latest_scores_df[latest_scores_df['Selection_ID'] == selected_id_modify].iloc[0]
            
            # Extract name and round from the selected row
            p_name = past_row['Leader Name'] # KEY: Leader Name
            p_round = str(past_row['Round']) 
            
            # Use the score submission form, pre-filled with the existing scores
            score_submission_form(
                judge_name, 
                event_name, 
                event_date, 
                c_names, 
                event_participants_df, # Pass DataFrame
                is_new=False,
                selected_participant_name=p_name,
                selected_round=p_round, # Pass selected round
                initial_scores=[
                    past_row['Criterion1_Marks'], 
                    past_row['Criterion2_Marks'], 
                    past_row['Criterion3_Marks'], 
                    past_row['Criterion4_Marks'],
                    past_row.get('Criterion5_Marks', 0.0) # SAFELY GET C5, default to 0.0
                ]
            )

# ----------------------------------------------------------------------------------------------------
## UI Interface 2: Results (Readonly)
# ----------------------------------------------------------------------------------------------------

@st.cache_data(ttl=60)
def read_and_process_scores():
    """
    Reads scores and participant metadata, merges them, and calculates aggregates.
    
    Returns: (final_detailed_df, raw_scores_df) or None if no scores found.
    """
    results_df = load_sheet_data(SCORE_SHEET_NAME) # This is the raw scores DataFrame
    participants_df = load_sheet_data(PARTICIPANT_SHEET_NAME)
    
    if results_df.empty:
        return None, pd.DataFrame()
    
    # 1. Clean and Prepare Scores Data
    score_cols = ['Criterion1_Marks', 'Criterion2_Marks', 'Criterion3_Marks', 'Criterion4_Marks', 'Criterion5_Marks', 'Total']
    for col in score_cols:
        if col in results_df.columns:
             results_df[col] = pd.to_numeric(results_df[col], errors='coerce').fillna(0)
             
    # Ensure 'Round' is present
    if 'Round' not in results_df.columns:
        results_df['Round'] = '1'
        
    # Ensure 'Leader Name' is present as the key from the score sheet
    if 'Leader Name' not in results_df.columns:
        st.error("❌ Aggregation failed: 'Leader Name' column not found in scores sheet.")
        return None, results_df

    # --- RAW SCORE PROCESSING (For detailed display) ---
    
    # Create a unique key for each raw score submission
    results_df['Raw_Score_ID'] = results_df['Judge Name'].str.cat(results_df['Round'].astype(str), sep='_R')
    
    # Select key columns for pivoting/detailed view
    raw_scores_wide = results_df.sort_values(by='Date & Time Entered', ascending=False).drop_duplicates(
        subset=['Judge Name', 'Leader Name', 'Round']
    ).copy()
    
    # Pivot the data to get Judge/Round scores as separate columns
    raw_scores_pivot = raw_scores_wide.pivot_table(
        index=['Event Name', 'Leader Name'], 
        columns='Raw_Score_ID', 
        values='Total',
        aggfunc='first' # Use the latest total score for that judge/round combo
    ).reset_index()
    
    # Flatten the column names (pivot adds multi-index, we need simple names)
    raw_scores_pivot.columns = [
        col if isinstance(col, str) else f"Judge_Round_{col}" 
        for col in raw_scores_pivot.columns
    ]
    
    # --- FINAL AGGREGATED SCORE CALCULATION (For ranking) ---

    # STEP 1: Average Judge Scores per Leader per Round
    avg_scores_per_round = results_df.groupby(["Event Name", "Leader Name", "Round"]).agg(
        Total_Round_Avg=('Total', 'mean'), 
        Judges_Count=('Judge Name', 'nunique')
    ).reset_index()

    # STEP 2: Sum Round Averages for Final Total Score
    final_aggregated = avg_scores_per_round.groupby(["Event Name", "Leader Name"]).agg(
        Final_Total=('Total_Round_Avg', 'sum'), 
        Rounds_Count=('Round', 'nunique'),
        Judges_Count_Max=('Judges_Count', 'max') 
    ).reset_index()
    
    # 2. Merge Final Aggregated Scores with Raw Wide Scores
    final_merged_df = pd.merge(
        final_aggregated,
        raw_scores_pivot,
        on=['Event Name', 'Leader Name'],
        how='left'
    )

    # 3. Merge with Participant Metadata 
    
    # --- FIND CORRECT LEADER NAME COLUMN FOR MERGE ---
    leader_name_col_merge = None
    possible_leader_cols_merge = ['Leader Name', 'Participant Name', 'P_Name', 'Name', 'LEADER NAME']
    
    for col in possible_leader_cols_merge:
        if col in participants_df.columns:
            leader_name_col_merge = col
            break
            
    if not leader_name_col_merge:
        st.error("❌ Critical: Could not find a suitable column for Leader/Participant Name in metadata for results merge.")
        return final_merged_df.rename(columns={'Leader Name': 'Participant Name'}), results_df
    
    # Define mapping columns
    column_mapping = {
        leader_name_col_merge: 'Leader Name', # MAP: Found column name becomes 'Leader Name' for the merge key
        'Registration ID': 'Registration ID',
        'Team Member Names': 'Team Member Names',
        'Team Member College/School Names': 'Team Member College/School Names', 
        'Leader College/School Name': 'Organization Name',
        'Leader Email': 'Email Id',
        'Leader Phone': 'Mobile No',
        'Event Type': 'Participant Type' 
    }
    
    # Filter mapping to only include columns that exist in the metadata DF
    valid_mapping = {k: v for k, v in column_mapping.items() if k in participants_df.columns}
    
    participant_details = participants_df.rename(columns=valid_mapping)

    # Select required columns from participant data (use the mapped names)
    required_mapped_cols = [
        'Leader Name', 'Registration ID', 'Team Member Names', 
        'Team Member College/School Names', 
        'Participant Type', 'Email Id', 'Mobile No', 'Organization Name'
    ]
    participant_details = participant_details[[col for col in required_mapped_cols if col in participant_details.columns]].drop_duplicates(subset=['Leader Name'])
    
    # Perform Merge on 'Leader Name'
    final_df = pd.merge(
        final_merged_df,
        participant_details,
        on='Leader Name',
        how='left'
    ).drop_duplicates(subset=['Event Name', 'Leader Name']) 

    # 4. Final Column Renaming and Cleanup
    
    # Rename 'Leader Name' to 'Participant Name' for UI consistency
    final_df = final_df.rename(columns={'Leader Name': 'Participant Name'})
    
    # Rename aggregated columns for display
    final_df = final_df.rename(columns={
        "Final_Total": "Grand Total", # New name for the final score
        "Rounds_Count": "Rounds Count", 
        "Judges_Count_Max": "Judges Count",
    })
    
    # NEW: Create a combined display name for the judge form/report
    final_df['Participant Display Name'] = final_df.apply(
        lambda row: f"{row['Participant Name']} ({row['Team Member Names']})" 
                    if row.get('Participant Type') == 'Group' and pd.notna(row.get('Team Member Names')) 
                    else row['Participant Name'], 
        axis=1
    )
    
    return final_df, results_df 

def results_page():
    """Interface 2: Results (Readonly) - Reads from Google Sheet"""
    
    if HEADING_B64:
        st.markdown(f'<img src="data:image/png;base64,{HEADING_B64}" class="img-fluid" style="width: 100%;">', unsafe_allow_html=True)
    else:
        st.warning("Event heading image not loaded (Placeholder Active).")
        
    st.markdown("## 📊 Event Results (Readonly)")

    processed_tuple = read_and_process_scores()
    
    if processed_tuple is None or processed_tuple[0].empty:
        st.info("No scores found in the Google Sheet.")
        return
        
    aggregated_results, raw_scores_df = processed_tuple 
    
    # --- Filters Setup ---
    event_names = ["All Events"] + aggregated_results["Event Name"].unique().tolist()
    
    col_event, col_option = st.columns([1.5, 1])
    
    with col_event:
        selected_event = st.selectbox("Filter by Event", event_names)
        
    with col_option:
        # User selected filters: Winners/All
        max_all_option = st.radio("Display Option", ["Winners", "All"], horizontal=True)

    st.divider()

    # Apply Event filter
    filtered_agg_df = aggregated_results.copy()
    if selected_event != "All Events":
        filtered_agg_df = filtered_agg_df[filtered_agg_df["Event Name"] == selected_event]
        
    # Apply filter logic
    if max_all_option == "Winners":
        if not filtered_agg_df.empty:
            
            if selected_event == "All Events":
                # Find the top 2 for *each* event across all events
                def get_top_two(df):
                    # Sort by the final ranking score: "Grand Total"
                    return df.sort_values(by="Grand Total", ascending=False).head(2)
                
                final_display_df = filtered_agg_df.groupby('Event Name', group_keys=False).apply(get_top_two).reset_index(drop=True)
            else:
                # Find the top 2 for the selected event
                final_display_df = filtered_agg_df.sort_values(by="Grand Total", ascending=False).head(2).reset_index(drop=True)

            # Add Rank column for Winners list
            final_display_df['Rank'] = final_display_df.groupby('Event Name')['Grand Total'].rank(ascending=False, method='min').astype(int)
            final_display_df = final_display_df.sort_values(by=["Event Name", "Rank"])
        else:
            final_display_df = filtered_agg_df
            
    else: # "All" is selected - REQUIRED: Sort by Total Score (Descending)
        final_display_df = filtered_agg_df.sort_values(
            by=["Event Name", "Grand Total"], 
            ascending=[True, False] 
        )
        final_display_df['Rank'] = final_display_df.groupby('Event Name')['Grand Total'].rank(ascending=False, method='min').astype(int)


    # 3. Display Results - Build the column order
    
    # Dynamic columns from the pivot table (Judge_Round_Total)
    judge_round_cols = [col for col in final_display_df.columns if col.startswith('Judge_Round_')]
    
    # Base columns for metadata and ranking
    base_cols = [
        "Rank", "Event Name", "Participant Display Name", "Grand Total", 
        "Judges Count", "Rounds Count", "Registration ID", 
        "Organization Name", "Email Id", "Mobile No",
        "Team Member Names", "Team Member College/School Names" 
    ]
    
    # Combine columns: Metadata/Ranking + Judge Details
    ordered_cols = [col for col in base_cols if col in final_display_df.columns]
    
    # Insert Judge/Round scores after the Grand Total
    grand_total_index = ordered_cols.index("Grand Total") + 1 if "Grand Total" in ordered_cols else len(ordered_cols)
    for col in sorted(judge_round_cols): # Sort dynamically generated columns
        ordered_cols.insert(grand_total_index, col)
        grand_total_index += 1
    
    # Filter final_display_df to show only the required columns, maintaining order
    display_df = final_display_df[[col for col in ordered_cols if col in final_display_df.columns]].copy()
    
    # Conditional display logic for Team Members columns (show only if Participant Type is 'Group')
    if 'Participant Type' in final_display_df.columns:
        # Create a boolean mask for rows where the participant type is NOT 'Group'
        mask_individual = final_display_df['Participant Type'] != 'Group'
        
        # Apply the mask to blank out the Team columns for individual participants
        if 'Team Member Names' in display_df.columns:
            display_df.loc[mask_individual, 'Team Member Names'] = ''
        if 'Team Member College/School Names' in display_df.columns:
            display_df.loc[mask_individual, 'Team Member College/School Names'] = ''

    # Optional: Rename 'Participant Display Name' for table display
    if 'Participant Display Name' in display_df.columns:
        display_df = display_df.rename(columns={'Participant Display Name': 'Participant / Team'})
    
    # Rename dynamic columns for cleaner display (e.g., "Judge_Round_radhika malhotra_R1" -> "radhika_R1 Score")
    rename_map = {col: col.replace('Judge_Round_', '').replace('_R', ' R') + ' Score' for col in judge_round_cols}
    display_df = display_df.rename(columns=rename_map)


    
    st.markdown("### Processed Results (Sum of Averaged Round Scores)")
    st.dataframe(display_df, use_container_width=True, hide_index=True)
    
    # --- Action Buttons (Download/Email) ---
    st.markdown("---")
    st.subheader("Results Distribution")
    
    # Prepare data for export
    printable_data = create_html_report(display_df)

    # 1. Download Button (Generates HTML for PDF printing)
    col_download, col_email_input, col_email_button = st.columns([1, 2, 1])

    with col_download:
        filename = f"Gardenia_Winners_Report_{selected_event}_{datetime.now().strftime('%Y%m%d')}.html"
        html_link = get_html_download_link(printable_data, filename)
        st.markdown(html_link, unsafe_allow_html=True)
        st.caption("Open file in browser, then Print (Ctrl+P) and save as PDF.")

    # 2. Email Simulation
    with col_email_input:
        recipient_email = st.text_input("Enter Email ID to send results:", key="email_recipient")
    
    with col_email_button:
        st.markdown("<br>", unsafe_allow_html=True) 
        if st.button("📧 Send Results via Email"):
            if "@" in recipient_email and "." in recipient_email:
                # --- EMAIL SIMULATION LOGIC ---
                st.success(f"📧 [SIMULATED] Email request logged for {recipient_email}.")
                st.info("NOTE: For real email functionality, a backend service (like SendGrid) is required.")
                # --- END SIMULATION ---
            else:
                st.error("❌ Please enter a valid email address.")


    with st.expander("View Raw Judge Scores from Google Sheet"):
        # Filter raw scores for the display too
        filtered_raw_df = raw_scores_df[raw_scores_df["Event Name"] == selected_event] if selected_event != "All Events" else raw_scores_df
        
        # Ensure 'Round' is visible in raw data
        if 'Round' in filtered_raw_df.columns:
             # Exclude Total for brevity, but include all new columns
             raw_display_cols = [col for col in filtered_raw_df.columns if col not in ['Total']]
             st.dataframe(filtered_raw_df[raw_display_cols], use_container_width=True, hide_index=True)
        else:
             st.dataframe(filtered_raw_df, use_container_width=True, hide_index=True)


# ----------------------------------------------------------------------------------------------------
## Main Application Flow (Role-Based Access Control)
# ----------------------------------------------------------------------------------------------------

st.set_page_config(
    "Gardenia 2024-Score Management System", 
    layout="wide"
)

if st.session_state.logged_in:
    if st.button("🚪 Logout"):
        load_sheet_data.clear() # Clear all caches on logout
        st.session_state.clear()
        st.rerun()
    
    st.sidebar.markdown(f"**Logged in as:** **{st.session_state.username}**")
    
    if st.session_state.role == "Admin":
        st.markdown(f"## Welcome, {st.session_state.username}!")
        results_page()
    
    elif st.session_state.role == "Judge":
        st.markdown(f"## Welcome, Judge {st.session_state.username}!")
        
        # Display ONLY the Judge Score Management tab
        tab1 = st.tabs(["📝 Judge Score Management"]) 
        
        with tab1[0]:
            judge_score_page()

else:
    login_user_gsheet()

# Disclaimer 
st.markdown("<hr><p style='text-align:center; font-size:12px; color:gray;'>"
             "All data, including login credentials and events, are managed by Central Scoring Committee."
             "</p>", unsafe_allow_html=True)

try:
    # Final check: This block executes after the entire app runs
    worksheet = spreadsheet.worksheet(SCORE_SHEET_NAME)
    # worksheet.get_all_records() # Removed to prevent unnecessary logging of large data
    print("Google Sheet connection object initialized successfully.")
except Exception as e:
    # Catch any error from the final connection check after deployment
    print(f"Final check error: {e}")
